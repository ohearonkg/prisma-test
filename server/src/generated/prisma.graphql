# source: https://us1.prisma.sh/kg-ohearon/prisma-test/dev
# timestamp: Mon Feb 25 2019 00:12:56 GMT-0400 (Atlantic Standard Time)

type AggregateExercise {
  count: Int!
}

type AggregateProgram {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Exercise implements Node {
  id: ID!
  name: String!
  type: ExerciseType!
  description: String
  Program(where: ProgramWhereInput, orderBy: ProgramOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Program!]
}

"""A connection to a list of items."""
type ExerciseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExerciseEdge]!
  aggregate: AggregateExercise!
}

input ExerciseCreateInput {
  name: String!
  type: ExerciseType!
  description: String
  Program: ProgramCreateManyWithoutExercisesInput
}

input ExerciseCreateManyWithoutProgramInput {
  create: [ExerciseCreateWithoutProgramInput!]
  connect: [ExerciseWhereUniqueInput!]
}

input ExerciseCreateWithoutProgramInput {
  name: String!
  type: ExerciseType!
  description: String
}

"""An edge in a connection."""
type ExerciseEdge {
  """The item at the end of the edge."""
  node: Exercise!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ExerciseOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  type_ASC
  type_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ExercisePreviousValues {
  id: ID!
  name: String!
  type: ExerciseType!
  description: String
}

input ExerciseScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ExerciseScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExerciseScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExerciseScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  type: ExerciseType

  """All values that are not equal to given value."""
  type_not: ExerciseType

  """All values that are contained in given list."""
  type_in: [ExerciseType!]

  """All values that are not contained in given list."""
  type_not_in: [ExerciseType!]
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type ExerciseSubscriptionPayload {
  mutation: MutationType!
  node: Exercise
  updatedFields: [String!]
  previousValues: ExercisePreviousValues
}

input ExerciseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ExerciseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExerciseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExerciseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ExerciseWhereInput
}

enum ExerciseType {
  BODYWEIGHT
  ASSISTED
  WEIGHTED
  CARDIO
}

input ExerciseUpdateInput {
  name: String
  type: ExerciseType
  description: String
  Program: ProgramUpdateManyWithoutExercisesInput
}

input ExerciseUpdateManyDataInput {
  name: String
  type: ExerciseType
  description: String
}

input ExerciseUpdateManyMutationInput {
  name: String
  type: ExerciseType
  description: String
}

input ExerciseUpdateManyWithoutProgramInput {
  create: [ExerciseCreateWithoutProgramInput!]
  connect: [ExerciseWhereUniqueInput!]
  set: [ExerciseWhereUniqueInput!]
  disconnect: [ExerciseWhereUniqueInput!]
  delete: [ExerciseWhereUniqueInput!]
  update: [ExerciseUpdateWithWhereUniqueWithoutProgramInput!]
  updateMany: [ExerciseUpdateManyWithWhereNestedInput!]
  deleteMany: [ExerciseScalarWhereInput!]
  upsert: [ExerciseUpsertWithWhereUniqueWithoutProgramInput!]
}

input ExerciseUpdateManyWithWhereNestedInput {
  where: ExerciseScalarWhereInput!
  data: ExerciseUpdateManyDataInput!
}

input ExerciseUpdateWithoutProgramDataInput {
  name: String
  type: ExerciseType
  description: String
}

input ExerciseUpdateWithWhereUniqueWithoutProgramInput {
  where: ExerciseWhereUniqueInput!
  data: ExerciseUpdateWithoutProgramDataInput!
}

input ExerciseUpsertWithWhereUniqueWithoutProgramInput {
  where: ExerciseWhereUniqueInput!
  update: ExerciseUpdateWithoutProgramDataInput!
  create: ExerciseCreateWithoutProgramInput!
}

input ExerciseWhereInput {
  """Logical AND on all given filters."""
  AND: [ExerciseWhereInput!]

  """Logical OR on all given filters."""
  OR: [ExerciseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ExerciseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  type: ExerciseType

  """All values that are not equal to given value."""
  type_not: ExerciseType

  """All values that are contained in given list."""
  type_in: [ExerciseType!]

  """All values that are not contained in given list."""
  type_not_in: [ExerciseType!]
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  Program_every: ProgramWhereInput
  Program_some: ProgramWhereInput
  Program_none: ProgramWhereInput
}

input ExerciseWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createProgram(data: ProgramCreateInput!): Program!
  createExercise(data: ExerciseCreateInput!): Exercise!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateProgram(data: ProgramUpdateInput!, where: ProgramWhereUniqueInput!): Program
  updateExercise(data: ExerciseUpdateInput!, where: ExerciseWhereUniqueInput!): Exercise
  deleteUser(where: UserWhereUniqueInput!): User
  deleteProgram(where: ProgramWhereUniqueInput!): Program
  deleteExercise(where: ExerciseWhereUniqueInput!): Exercise
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertProgram(where: ProgramWhereUniqueInput!, create: ProgramCreateInput!, update: ProgramUpdateInput!): Program!
  upsertExercise(where: ExerciseWhereUniqueInput!, create: ExerciseCreateInput!, update: ExerciseUpdateInput!): Exercise!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyPrograms(data: ProgramUpdateManyMutationInput!, where: ProgramWhereInput): BatchPayload!
  updateManyExercises(data: ExerciseUpdateManyMutationInput!, where: ExerciseWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyPrograms(where: ProgramWhereInput): BatchPayload!
  deleteManyExercises(where: ExerciseWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Program implements Node {
  id: ID!
  name: String!
  user: User!
  exercises(where: ExerciseWhereInput, orderBy: ExerciseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Exercise!]
}

"""A connection to a list of items."""
type ProgramConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProgramEdge]!
  aggregate: AggregateProgram!
}

input ProgramCreateInput {
  name: String!
  user: UserCreateOneWithoutProgramsInput!
  exercises: ExerciseCreateManyWithoutProgramInput
}

input ProgramCreateManyWithoutExercisesInput {
  create: [ProgramCreateWithoutExercisesInput!]
  connect: [ProgramWhereUniqueInput!]
}

input ProgramCreateManyWithoutUserInput {
  create: [ProgramCreateWithoutUserInput!]
  connect: [ProgramWhereUniqueInput!]
}

input ProgramCreateWithoutExercisesInput {
  name: String!
  user: UserCreateOneWithoutProgramsInput!
}

input ProgramCreateWithoutUserInput {
  name: String!
  exercises: ExerciseCreateManyWithoutProgramInput
}

"""An edge in a connection."""
type ProgramEdge {
  """The item at the end of the edge."""
  node: Program!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProgramOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProgramPreviousValues {
  id: ID!
  name: String!
}

input ProgramScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProgramScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProgramScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProgramScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type ProgramSubscriptionPayload {
  mutation: MutationType!
  node: Program
  updatedFields: [String!]
  previousValues: ProgramPreviousValues
}

input ProgramSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProgramSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProgramSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProgramSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProgramWhereInput
}

input ProgramUpdateInput {
  name: String
  user: UserUpdateOneRequiredWithoutProgramsInput
  exercises: ExerciseUpdateManyWithoutProgramInput
}

input ProgramUpdateManyDataInput {
  name: String
}

input ProgramUpdateManyMutationInput {
  name: String
}

input ProgramUpdateManyWithoutExercisesInput {
  create: [ProgramCreateWithoutExercisesInput!]
  connect: [ProgramWhereUniqueInput!]
  set: [ProgramWhereUniqueInput!]
  disconnect: [ProgramWhereUniqueInput!]
  delete: [ProgramWhereUniqueInput!]
  update: [ProgramUpdateWithWhereUniqueWithoutExercisesInput!]
  updateMany: [ProgramUpdateManyWithWhereNestedInput!]
  deleteMany: [ProgramScalarWhereInput!]
  upsert: [ProgramUpsertWithWhereUniqueWithoutExercisesInput!]
}

input ProgramUpdateManyWithoutUserInput {
  create: [ProgramCreateWithoutUserInput!]
  connect: [ProgramWhereUniqueInput!]
  set: [ProgramWhereUniqueInput!]
  disconnect: [ProgramWhereUniqueInput!]
  delete: [ProgramWhereUniqueInput!]
  update: [ProgramUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ProgramUpdateManyWithWhereNestedInput!]
  deleteMany: [ProgramScalarWhereInput!]
  upsert: [ProgramUpsertWithWhereUniqueWithoutUserInput!]
}

input ProgramUpdateManyWithWhereNestedInput {
  where: ProgramScalarWhereInput!
  data: ProgramUpdateManyDataInput!
}

input ProgramUpdateWithoutExercisesDataInput {
  name: String
  user: UserUpdateOneRequiredWithoutProgramsInput
}

input ProgramUpdateWithoutUserDataInput {
  name: String
  exercises: ExerciseUpdateManyWithoutProgramInput
}

input ProgramUpdateWithWhereUniqueWithoutExercisesInput {
  where: ProgramWhereUniqueInput!
  data: ProgramUpdateWithoutExercisesDataInput!
}

input ProgramUpdateWithWhereUniqueWithoutUserInput {
  where: ProgramWhereUniqueInput!
  data: ProgramUpdateWithoutUserDataInput!
}

input ProgramUpsertWithWhereUniqueWithoutExercisesInput {
  where: ProgramWhereUniqueInput!
  update: ProgramUpdateWithoutExercisesDataInput!
  create: ProgramCreateWithoutExercisesInput!
}

input ProgramUpsertWithWhereUniqueWithoutUserInput {
  where: ProgramWhereUniqueInput!
  update: ProgramUpdateWithoutUserDataInput!
  create: ProgramCreateWithoutUserInput!
}

input ProgramWhereInput {
  """Logical AND on all given filters."""
  AND: [ProgramWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProgramWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProgramWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  user: UserWhereInput
  exercises_every: ExerciseWhereInput
  exercises_some: ExerciseWhereInput
  exercises_none: ExerciseWhereInput
}

input ProgramWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  programs(where: ProgramWhereInput, orderBy: ProgramOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Program]!
  exercises(where: ExerciseWhereInput, orderBy: ExerciseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Exercise]!
  user(where: UserWhereUniqueInput!): User
  program(where: ProgramWhereUniqueInput!): Program
  exercise(where: ExerciseWhereUniqueInput!): Exercise
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  programsConnection(where: ProgramWhereInput, orderBy: ProgramOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProgramConnection!
  exercisesConnection(where: ExerciseWhereInput, orderBy: ExerciseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExerciseConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  program(where: ProgramSubscriptionWhereInput): ProgramSubscriptionPayload
  exercise(where: ExerciseSubscriptionWhereInput): ExerciseSubscriptionPayload
}

type User implements Node {
  id: ID!
  username: String!
  password: String!
  programs(where: ProgramWhereInput, orderBy: ProgramOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Program!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String!
  password: String!
  programs: ProgramCreateManyWithoutUserInput
}

input UserCreateOneWithoutProgramsInput {
  create: UserCreateWithoutProgramsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutProgramsInput {
  username: String!
  password: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  username: String
  password: String
  programs: ProgramUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  username: String
  password: String
}

input UserUpdateOneRequiredWithoutProgramsInput {
  create: UserCreateWithoutProgramsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutProgramsDataInput
  upsert: UserUpsertWithoutProgramsInput
}

input UserUpdateWithoutProgramsDataInput {
  username: String
  password: String
}

input UserUpsertWithoutProgramsInput {
  update: UserUpdateWithoutProgramsDataInput!
  create: UserCreateWithoutProgramsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  programs_every: ProgramWhereInput
  programs_some: ProgramWhereInput
  programs_none: ProgramWhereInput
}

input UserWhereUniqueInput {
  id: ID
  username: String
}
